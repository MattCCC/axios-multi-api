{"version":3,"sources":["../src/api-handler.ts","../src/http-request-handler.ts","../src/http-request-error-handler.ts"],"sourcesContent":["// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public endpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        endpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.endpoints = endpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.endpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.endpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/gi, (str: string) =>\n          uriParams[str.substring(1)] ? uriParams[str.substring(1)] : str\n        );\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n","// 3rd party libs\nimport axios, { AxiosInstance, Method } from 'axios';\nimport { applyMagic, MagicalClass } from 'js-magic';\n\n// Shared Modules\nimport { HttpRequestErrorHandler } from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'reject';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, AbortController>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse =\n            flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(\n        type: Method,\n        url: string,\n        data: any = null,\n        config: EndpointConfig = null\n    ): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(\n        method: string,\n        url: string,\n        data: any,\n        config: EndpointConfig\n    ): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key =\n            methodLowerCase === 'get' || methodLowerCase === 'head'\n                ? 'params'\n                : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(\n        error: RequestError,\n        requestConfig: EndpointConfig\n    ): void {\n        if (this.isRequestCancelled(error, requestConfig)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(\n        error: RequestError,\n        requestConfig: EndpointConfig\n    ): Promise<IRequestResponse> {\n        const isRequestCancelled = this.isRequestCancelled(error, requestConfig);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (\n            errorHandlingStrategy === 'reject' ||\n            errorHandlingStrategy === 'throwError'\n        ) {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} _requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(\n        error: RequestError,\n        _requestConfig: EndpointConfig\n    ): boolean {\n        return axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (\n            typeof requestConfig.cancellable !== 'undefined' &&\n            !requestConfig.cancellable\n        ) {\n            return {};\n        }\n\n        // Check if AbortController is available\n        if (typeof AbortController === 'undefined') {\n            console.error('AbortController is unavailable in your ENV.');\n\n            return {};\n        }\n\n        const {\n            method,\n            baseURL,\n            url,\n            params,\n            data,\n        } = requestConfig;\n\n        // Generate unique key as a cancellation token. Make sure it fits Map\n        const key = JSON.stringify([\n          method,\n          baseURL,\n          url,\n          params,\n          data,\n        ]).substring(0, 55 ** 5);\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.abort();\n        }\n\n        const controller = new AbortController();\n\n        this.requestsQueue.set(key, controller);\n\n        return {\n            signal: controller.signal,\n        };\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(\n            type,\n            url,\n            data,\n            endpointConfig\n        );\n\n        requestConfig = {\n            ...this.addCancellationToken(requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (\n                typeof response.data === 'object' &&\n                typeof response.data.data !== 'undefined' &&\n                Object.keys(response.data).length === 1\n            ) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}\n","export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}"],"mappings":"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","names":["applyMagic","axios","applyMagic","HttpRequestErrorHandler","logger","httpRequestErrorService","error","errorContext","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","logger","onError","config","axios","callback","prop","type","url","data","method","methodLowerCase","error","requestConfig","HttpRequestErrorHandler","isRequestCancelled","errorHandlingStrategy","_requestConfig","params","key","previousRequest","controller","response","endpointConfig","__decorateClass","applyMagic","ApiHandler","apiUrl","endpoints","timeout","cancellable","strategy","flattenResponse","defaultResponse","logger","onError","config","HttpRequestHandler","prop","args","endpointSettings","queryParams","uriParams","requestConfig","uri","str","responseData","additionalRequestSettings","__decorateClass","applyMagic","createApiFetcher","options"]}