{"version":3,"file":"index.esm.js","sources":["../src/http-request-error-handler.ts","../src/http-request-handler.ts","../src/api-handler.ts"],"sourcesContent":["export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}","// 3rd party libs\nimport axios, {\n    AxiosInstance,\n    Method,\n} from 'axios';\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Shared Modules\nimport {\n    HttpRequestErrorHandler,\n} from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'silent';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, any>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse = flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(type: Method, url: string, data: any = null, config: EndpointConfig = null): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(method: string, url: string, data: any, config: EndpointConfig): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key = methodLowerCase === 'get' || methodLowerCase === 'head' ? 'params' : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(error: RequestError, requestConfig: EndpointConfig): void {\n        if (axios.isCancel(error)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(error: RequestError, requestConfig: EndpointConfig): Promise<IRequestResponse> {\n        const isRequestCancelled = requestConfig.cancelToken && axios.isCancel(error);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (errorHandlingStrategy === 'reject' || errorHandlingStrategy === 'throwError') {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(error: RequestError, requestConfig: EndpointConfig): boolean {\n        return requestConfig.cancelToken && axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {string} type                    Request type\n     * @param {string} url                     Request url\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(type: string, url: string, requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (typeof requestConfig.cancellable !== \"undefined\" && !requestConfig.cancellable) {\n            return {};\n        }\n\n        const key = `${type}-${url}`;\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.cancel();\n        }\n\n        const tokenSource = axios.CancelToken.source();\n\n        this.requestsQueue.set(key, tokenSource);\n\n        const mappedRequest = this.requestsQueue.get(key) || {};\n\n        return mappedRequest.token ? {\n            cancelToken: mappedRequest.token\n        } : {};\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(type, url, data, endpointConfig);\n\n        requestConfig = {\n            ...this.addCancellationToken(type, url, requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (typeof response.data === 'object' && typeof response.data.data !== \"undefined\" && Object.keys(response.data).length === 1) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}","// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public apiEndpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        apiEndpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.apiEndpoints = apiEndpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.apiEndpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.apiEndpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/gi, (str: string) =>\n          uriParams[str.substring(1)] ? uriParams[str.substring(1)] : str\n        );\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n"],"names":["HttpRequestErrorHandler","logger","httpRequestErrorService","process","error","warn","errorContext","Error","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","onError","config","global","console","window","requestsQueue","Map","requestInstance","axios","create","getInstance","interceptRequest","callback","interceptors","request","use","__get","prop","prepareRequest","bind","type","url","data","handleRequest","buildRequestConfig","method","methodLowerCase","toLowerCase","key","processRequestError","requestConfig","isCancel","errorHandler","outputErrorResponse","isRequestCancelled","cancelToken","errorHandlingStrategy","rejectCancelled","Promise","reject","addCancellationToken","previousRequest","get","cancel","tokenSource","CancelToken","source","set","mappedRequest","token","response","endpointConfig","processResponseData","Object","keys","length","applyMagic","ApiHandler","apiUrl","apiEndpoints","httpRequestHandler","handleNonImplemented","endpointSettings","queryParams","uriParams","uri","replace","str","substring","responseData","additionalRequestSettings","log","resolve","createApiFetcher","options"],"mappings":"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"}