{"version":3,"file":"index.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/http-request-error-handler.ts","../src/http-request-handler.ts","../src/api-handler.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}","// 3rd party libs\nimport axios, {\n    AxiosInstance,\n    Method,\n} from 'axios';\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Shared Modules\nimport {\n    HttpRequestErrorHandler,\n} from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'silent';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, any>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse = flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(type: Method, url: string, data: any = null, config: EndpointConfig = null): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(method: string, url: string, data: any, config: EndpointConfig): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key = methodLowerCase === 'get' || methodLowerCase === 'head' ? 'params' : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(error: RequestError, requestConfig: EndpointConfig): void {\n        if (axios.isCancel(error)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(error: RequestError, requestConfig: EndpointConfig): Promise<IRequestResponse> {\n        const isRequestCancelled = requestConfig.cancelToken && axios.isCancel(error);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (errorHandlingStrategy === 'reject' || errorHandlingStrategy === 'throwError') {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(error: RequestError, requestConfig: EndpointConfig): boolean {\n        return requestConfig.cancelToken && axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {string} type                    Request type\n     * @param {string} url                     Request url\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(type: string, url: string, requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (typeof requestConfig.cancellable !== \"undefined\" && !requestConfig.cancellable) {\n            return {};\n        }\n\n        const key = `${type}-${url}`;\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.cancel();\n        }\n\n        const tokenSource = axios.CancelToken.source();\n\n        this.requestsQueue.set(key, tokenSource);\n\n        const mappedRequest = this.requestsQueue.get(key) || {};\n\n        return mappedRequest.token ? {\n            cancelToken: mappedRequest.token\n        } : {};\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(type, url, data, endpointConfig);\n\n        requestConfig = {\n            ...this.addCancellationToken(type, url, requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (typeof response.data === 'object' && typeof response.data.data !== \"undefined\" && Object.keys(response.data).length === 1) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}","// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public apiEndpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        apiEndpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.apiEndpoints = apiEndpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.apiEndpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.apiEndpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/ig, (str: string) => (uriParams[str.substr(1)] ? uriParams[str.substr(1)] : str));\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n"],"names":["Symbol","iterator","asyncIterator","HttpRequestErrorHandler","constructor","logger","httpRequestErrorService","process","error","this","warn","errorContext","Error","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","onError","config","global","console","window","requestsQueue","Map","requestInstance","axios","create","getInstance","interceptRequest","callback","interceptors","request","use","__get","prop","prepareRequest","bind","type","url","data","handleRequest","buildRequestConfig","method","methodLowerCase","toLowerCase","processRequestError","requestConfig","isCancel","outputErrorResponse","errorHandlingStrategy","Promise","reject","_this","isRequestCancelled","cancelToken","rejectCancelled","addCancellationToken","key","previousRequest","get","cancel","tokenSource","CancelToken","source","set","mappedRequest","token","_this2","processResponseData","response","body","recover","result","e","then","Object","keys","length","applyMagic","ApiHandler","apiUrl","apiEndpoints","httpRequestHandler","handleNonImplemented","args","endpointSettings","queryParams","uriParams","uri","replace","str","substr","responseData","additionalRequestSettings","log","resolve","options"],"mappings":"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"}