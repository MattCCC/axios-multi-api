{"version":3,"file":"index.cjs.production.min.js","sources":["../src/http-request-error-handler.ts","../src/http-request-handler.ts","../src/api-handler.ts"],"sourcesContent":["export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}","// 3rd party libs\nimport axios, {\n    AxiosInstance,\n    Method,\n} from 'axios';\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Shared Modules\nimport {\n    HttpRequestErrorHandler,\n} from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'silent';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, any>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse = flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(type: Method, url: string, data: any = null, config: EndpointConfig = null): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(method: string, url: string, data: any, config: EndpointConfig): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key = methodLowerCase === 'get' || methodLowerCase === 'head' ? 'params' : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(error: RequestError, requestConfig: EndpointConfig): void {\n        if (axios.isCancel(error)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(error: RequestError, requestConfig: EndpointConfig): Promise<IRequestResponse> {\n        const isRequestCancelled = requestConfig.cancelToken && axios.isCancel(error);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (errorHandlingStrategy === 'reject' || errorHandlingStrategy === 'throwError') {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(error: RequestError, requestConfig: EndpointConfig): boolean {\n        return requestConfig.cancelToken && axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {string} type                    Request type\n     * @param {string} url                     Request url\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(type: string, url: string, requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (typeof requestConfig.cancellable !== \"undefined\" && !requestConfig.cancellable) {\n            return {};\n        }\n\n        const key = `${type}-${url}`;\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.cancel();\n        }\n\n        const tokenSource = axios.CancelToken.source();\n\n        this.requestsQueue.set(key, tokenSource);\n\n        const mappedRequest = this.requestsQueue.get(key) || {};\n\n        return mappedRequest.token ? {\n            cancelToken: mappedRequest.token\n        } : {};\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(type, url, data, endpointConfig);\n\n        requestConfig = {\n            ...this.addCancellationToken(type, url, requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (typeof response.data === 'object' && typeof response.data.data !== \"undefined\" && Object.keys(response.data).length === 1) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}","// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public apiEndpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        apiEndpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.apiEndpoints = apiEndpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.apiEndpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.apiEndpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/gi, (str: string) =>\n          uriParams[str.substring(1)] ? uriParams[str.substring(1)] : str\n        );\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n"],"names":["HttpRequestErrorHandler","constructor","logger","httpRequestErrorService","this","process","error","warn","errorContext","Error","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","onError","config","global","console","window","requestsQueue","Map","requestInstance","axios","create","getInstance","interceptRequest","callback","interceptors","request","use","__get","prop","prepareRequest","bind","type","url","data","handleRequest","buildRequestConfig","method","methodLowerCase","toLowerCase","[object Object]","processRequestError","requestConfig","isCancel","isRequestCancelled","cancelToken","errorHandlingStrategy","rejectCancelled","Promise","reject","addCancellationToken","key","previousRequest","get","cancel","tokenSource","CancelToken","source","set","mappedRequest","token","response","outputErrorResponse","processResponseData","Object","keys","length","applyMagic","ApiHandler","apiUrl","apiEndpoints","httpRequestHandler","handleNonImplemented","args","endpointSettings","queryParams","uriParams","uri","replace","str","substring","responseData","additionalRequestSettings","log","resolve","options"],"mappings":"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"}