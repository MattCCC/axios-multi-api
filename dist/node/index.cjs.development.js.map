{"version":3,"file":"index.cjs.development.js","sources":["../src/http-request-error-handler.ts","../src/http-request-handler.ts","../src/api-handler.ts"],"sourcesContent":["export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}","// 3rd party libs\nimport axios, {\n    AxiosInstance,\n    Method,\n} from 'axios';\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Shared Modules\nimport {\n    HttpRequestErrorHandler,\n} from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'silent';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, any>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse = flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(type: Method, url: string, data: any = null, config: EndpointConfig = null): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(method: string, url: string, data: any, config: EndpointConfig): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key = methodLowerCase === 'get' || methodLowerCase === 'head' ? 'params' : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(error: RequestError, requestConfig: EndpointConfig): void {\n        if (axios.isCancel(error)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(error: RequestError, requestConfig: EndpointConfig): Promise<IRequestResponse> {\n        const isRequestCancelled = requestConfig.cancelToken && axios.isCancel(error);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (errorHandlingStrategy === 'reject' || errorHandlingStrategy === 'throwError') {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(error: RequestError, requestConfig: EndpointConfig): boolean {\n        return requestConfig.cancelToken && axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {string} type                    Request type\n     * @param {string} url                     Request url\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(type: string, url: string, requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (typeof requestConfig.cancellable !== \"undefined\" && !requestConfig.cancellable) {\n            return {};\n        }\n\n        const key = `${type}-${url}`;\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.cancel();\n        }\n\n        const tokenSource = axios.CancelToken.source();\n\n        this.requestsQueue.set(key, tokenSource);\n\n        const mappedRequest = this.requestsQueue.get(key) || {};\n\n        return mappedRequest.token ? {\n            cancelToken: mappedRequest.token\n        } : {};\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(type, url, data, endpointConfig);\n\n        requestConfig = {\n            ...this.addCancellationToken(type, url, requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (typeof response.data === 'object' && typeof response.data.data !== \"undefined\" && Object.keys(response.data).length === 1) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}","// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public apiEndpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        apiEndpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.apiEndpoints = apiEndpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.apiEndpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.apiEndpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/ig, (str: string) => (uriParams[str.substr(1)] ? uriParams[str.substr(1)] : str));\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n"],"names":["HttpRequestErrorHandler","constructor","logger","httpRequestErrorService","process","error","warn","errorContext","Error","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","onError","config","global","console","window","requestsQueue","Map","requestInstance","axios","create","getInstance","interceptRequest","callback","interceptors","request","use","__get","prop","prepareRequest","bind","type","url","data","handleRequest","buildRequestConfig","method","methodLowerCase","toLowerCase","key","processRequestError","requestConfig","isCancel","errorHandler","outputErrorResponse","isRequestCancelled","cancelToken","errorHandlingStrategy","rejectCancelled","Promise","reject","addCancellationToken","previousRequest","get","cancel","tokenSource","CancelToken","source","set","mappedRequest","token","response","endpointConfig","processResponseData","Object","keys","length","applyMagic","ApiHandler","apiUrl","apiEndpoints","httpRequestHandler","handleNonImplemented","args","endpointSettings","queryParams","uriParams","uri","replace","str","substr","responseData","additionalRequestSettings","log","resolve","createApiFetcher","options"],"mappings":"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"}