{"version":3,"sources":["../src/index.ts","../src/api-handler.ts","../src/request-handler.ts","../src/request-error-handler.ts"],"sourcesContent":["export * from './types';\nexport * from './api-handler';\nexport * from './request-handler';\nexport * from './request-error-handler';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// 3rd party libs\nimport { applyMagic, MagicalClass } from 'js-magic';\n\nimport type {\n  RequestResponse,\n  APIHandlerConfig,\n  EndpointsConfig,\n  FetcherInstance,\n} from './types/http-request';\n\nimport { RequestHandler } from './request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler<EndpointsList = { [x: string]: unknown }>\n  implements MagicalClass\n{\n  /**\n   * TS Index signature\n   */\n  [x: string]: unknown;\n\n  /**\n   * @var requestHandler Request Wrapper Instance\n   */\n  public requestHandler: RequestHandler;\n\n  /**\n   * Endpoints\n   */\n  protected endpoints: EndpointsConfig<string>;\n\n  /**\n   * Logger\n   */\n  protected logger: any;\n\n  /**\n   * Creates an instance of API Handler\n   * @inheritdoc createApiFetcher()\n   */\n  public constructor(config: APIHandlerConfig<EndpointsList>) {\n    this.endpoints = config.endpoints;\n    this.logger = config.logger;\n\n    this.requestHandler = new RequestHandler(config);\n  }\n\n  /**\n   * Get Provider Instance\n   *\n   * @returns {FetcherInstance} Provider's instance\n   */\n  public getInstance(): FetcherInstance {\n    return this.requestHandler.getInstance();\n  }\n\n  /**\n   * Maps all API requests\n   *\n   * @private\n   * @param {*} prop          Caller\n   * @returns {Function}      Tailored request function\n   */\n  public __get(prop: any): any {\n    if (prop in this) {\n      return this[prop];\n    }\n\n    // Prevent handler from running for non-existent endpoints\n    if (!this.endpoints[prop]) {\n      return this.handleNonImplemented.bind(this, prop);\n    }\n\n    return this.handleRequest.bind(this, prop);\n  }\n\n  /**\n   * Handle Single API Request\n   *\n   * @param {*} args      Arguments\n   * @returns {Promise}   Resolvable API provider promise\n   */\n  public async handleRequest(...args: string[]): Promise<RequestResponse> {\n    const prop = args[0];\n    const endpointSettings = this.endpoints[prop];\n\n    const queryParams = args[1] || {};\n    const uriParams = args[2] || {};\n    const requestConfig = args[3] || {};\n\n    const uri = endpointSettings.url.replace(/:[a-z]+/gi, (str: string) =>\n      uriParams[str.substring(1)] ? uriParams[str.substring(1)] : str,\n    );\n\n    let responseData = null;\n\n    const additionalRequestSettings = { ...endpointSettings };\n\n    delete additionalRequestSettings.url;\n    delete additionalRequestSettings.method;\n\n    responseData = await this.requestHandler[\n      (endpointSettings.method || 'get').toLowerCase()\n    ](uri, queryParams, {\n      ...requestConfig,\n      ...additionalRequestSettings,\n    });\n\n    return responseData;\n  }\n\n  /**\n   * Triggered when trying to use non-existent endpoints\n   *\n   * @param prop Method Name\n   * @returns {Promise}\n   */\n  protected handleNonImplemented(prop: string): Promise<null> {\n    if (this.logger?.log) {\n      this.logger.log(`${prop} endpoint not implemented.`);\n    }\n\n    return Promise.resolve(null);\n  }\n}\n\n/**\n * Creates an API fetcher function using native fetch() or Axios if it is passed as \"fetcher\".\n *\n * @param {Object} config - Configuration object for the API fetcher.\n * @param {Object} config.fetcher - The Axios (or any other) instance to use for making requests.\n * @param {Object} config.endpoints - An object containing endpoint definitions.\n * @param {string} config.apiUrl - The base URL for the API.\n * @param {Function} [config.onError] - Optional callback function for handling errors.\n * @param {Object} [config.headers] - Optional default headers to include in every request.\n * @returns {Function} - A function that makes API requests using the provided Axios instance.\n *\n * @example\n * // Import axios\n * import axios from 'axios';\n *\n * // Define endpoint paths\n * const endpoints = {\n *   getUser: '/user',\n *   createPost: '/post',\n * };\n *\n * // Create the API fetcher with configuration\n * const api = createApiFetcher({\n *   fetcher: axios, // Axios instance (optional)\n *   endpoints,\n *   apiUrl: 'https://example.com/api',\n *   onError(error) {\n *     console.log('Request failed', error);\n *   },\n *   headers: {\n *     'my-auth-key': 'example-auth-key-32rjjfa',\n *   },\n * });\n *\n * // Fetch user data\n * const response = await api.getUser({ userId: 1, ratings: [1, 2] })\n */\nexport const createApiFetcher = <AllEndpointsList = { [x: string]: unknown }>(\n  options: APIHandlerConfig<AllEndpointsList>,\n) => new ApiHandler(options) as ApiHandler & AllEndpointsList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// 3rd party libs\nimport { applyMagic, MagicalClass } from 'js-magic';\n\n// Shared Modules\nimport { RequestErrorHandler } from './request-error-handler';\n\n// Types\nimport type {\n  RequestResponse,\n  ErrorHandlingStrategy,\n  RequestHandlerConfig,\n  EndpointConfig,\n  RequestError,\n  FetcherInstance,\n  FetcherStaticInstance,\n  Method,\n  NativeFetch,\n  EndpointConfigHeaders,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Request Fetcher instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class RequestHandler implements MagicalClass {\n  /**\n   * @var requestInstance Provider's instance\n   */\n  public requestInstance: FetcherInstance;\n\n  /**\n   * @var timeout Request timeout\n   */\n  public timeout: number = 30000;\n\n  /**\n   * @var cancellable Response cancellation\n   */\n  public cancellable: boolean = false;\n\n  /**\n   * @var strategy Request timeout\n   */\n  public strategy: ErrorHandlingStrategy = 'reject';\n\n  /**\n   * @var flattenResponse Response flattening\n   */\n  public flattenResponse: boolean = true;\n\n  /**\n   * @var defaultResponse Response flattening\n   */\n  public defaultResponse: any = null;\n\n  /**\n   * @var fetcher Request Fetcher instance\n   */\n  protected fetcher: FetcherStaticInstance;\n\n  /**\n   * @var logger Logger\n   */\n  protected logger: any;\n\n  /**\n   * @var requestErrorService HTTP error service\n   */\n  protected requestErrorService: any;\n\n  /**\n   * @var requestsQueue    Queue of requests\n   */\n  protected requestsQueue: Map<string, AbortController>;\n\n  /**\n   * Creates an instance of HttpRequestHandler\n   *\n   * @param {string} config.fetcher              Request Fetcher instance\n   * @param {string} config.baseURL              Base URL for all API calls\n   * @param {number} config.timeout              Request timeout\n   * @param {string} config.strategy             Error Handling Strategy\n   * @param {string} config.flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n   * @param {*} config.logger                    Instance of Logger Class\n   * @param {*} config.requestErrorService       Instance of Error Service Class\n   */\n  public constructor({\n    fetcher = null,\n    baseURL = '',\n    timeout = null,\n    cancellable = false,\n    strategy = null,\n    flattenResponse = null,\n    defaultResponse = {},\n    logger = null,\n    onError = null,\n    ...config\n  }: RequestHandlerConfig) {\n    this.fetcher = fetcher;\n    this.timeout =\n      timeout !== null && timeout !== undefined ? timeout : this.timeout;\n    this.strategy =\n      strategy !== null && strategy !== undefined ? strategy : this.strategy;\n    this.cancellable = cancellable || this.cancellable;\n    this.flattenResponse =\n      flattenResponse !== null && flattenResponse !== undefined\n        ? flattenResponse\n        : this.flattenResponse;\n    this.defaultResponse = defaultResponse;\n    this.logger = logger || (globalThis ? globalThis.console : null) || null;\n    this.requestErrorService = onError;\n    this.requestsQueue = new Map();\n\n    this.requestInstance = this.isCustomFetcher()\n      ? fetcher.create({\n          ...config,\n          baseURL: baseURL || config.apiUrl || '',\n          timeout: this.timeout,\n        })\n      : globalThis.fetch;\n  }\n\n  /**\n   * Get Provider Instance\n   *\n   * @returns {FetcherInstance} Provider's instance\n   */\n  public getInstance(): FetcherInstance {\n    return this.requestInstance;\n  }\n\n  /**\n   * Maps all API request types\n   *\n   * @throws {RequestError} If request fails\n   * @returns {Promise} Response data or error\n   */\n  public __get(prop: string) {\n    if (prop in this) {\n      return this[prop];\n    }\n\n    return this.handleRequest.bind(this, prop);\n  }\n\n  /**\n   * Appends query parameters to the given URL\n   *\n   * @param {string} url - The base URL to which query parameters will be appended.\n   * @param {Record<string, any>} params - An instance of URLSearchParams containing the query parameters to append.\n   * @returns {string} - The URL with the appended query parameters.\n   */\n  public appendQueryParams(url: string, params: Record<string, any>): string {\n    // We don't use URLSearchParams here as we want to ensure that arrays are properly converted similarily to Axios\n    // So { foo: [1, 2] } would become: foo[]=1&foo[]=2\n    const queryString = Object.entries(params)\n      .flatMap(([key, value]) => {\n        if (Array.isArray(value)) {\n          return value.map(\n            (val) => `${encodeURIComponent(key)}[]=${encodeURIComponent(val)}`,\n          );\n        }\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      })\n      .join('&');\n\n    return url.includes('?')\n      ? `${url}&${queryString}`\n      : queryString\n        ? `${url}?${queryString}`\n        : url;\n  }\n\n  /**\n   * Checks if a value is JSON serializable.\n   *\n   * JSON serializable values include:\n   * - Primitive types: string, number, boolean, null\n   * - Arrays\n   * - Plain objects (i.e., objects without special methods)\n   * - Values with a `toJSON` method\n   *\n   * @param {any} value - The value to check for JSON serializability.\n   * @returns {boolean} - Returns `true` if the value is JSON serializable, otherwise `false`.\n   */\n  protected isJSONSerializable(value: any): boolean {\n    if (value === undefined || value === null) {\n      return false;\n    }\n\n    const t = typeof value;\n    if (t === 'string' || t === 'number' || t === 'boolean') {\n      return true;\n    }\n\n    if (t !== 'object') {\n      return false; // bigint, function, symbol, undefined\n    }\n\n    if (Array.isArray(value)) {\n      return true;\n    }\n\n    if (Buffer.isBuffer(value)) {\n      return false;\n    }\n\n    if (value instanceof Date) {\n      return false;\n    }\n\n    const proto = Object.getPrototypeOf(value);\n\n    // Check if the prototype is `Object.prototype` or `null` (plain object)\n    if (proto === Object.prototype || proto === null) {\n      return true;\n    }\n\n    // Check if the object has a toJSON method\n    if (typeof value.toJSON === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Build request configuration\n   *\n   * @param {string} method               Request method\n   * @param {string} url                  Request url\n   * @param {*}      data                 Request data\n   * @param {EndpointConfig} config       Request config\n   * @returns {EndpointConfig}            Provider's instance\n   */\n  protected buildRequestConfig(\n    method: Method,\n    url: string,\n    data: any,\n    config: EndpointConfig,\n  ): EndpointConfig {\n    const methodLowerCase = method.toLowerCase();\n    const isGetAlikeMethod =\n      methodLowerCase === 'get' || methodLowerCase === 'head';\n\n    // Axios compatibility\n    if (this.isCustomFetcher()) {\n      return {\n        ...config,\n        url,\n        method: methodLowerCase,\n\n        ...(isGetAlikeMethod ? { params: data } : {}),\n\n        // For POST requests body payload is the first param for convenience (\"data\")\n        // In edge cases we want to split so to treat it as query params, and use \"body\" coming from the config instead\n        ...(!isGetAlikeMethod && data && config.data ? { params: data } : {}),\n\n        // Only applicable for request methods 'PUT', 'POST', 'DELETE', and 'PATCH'\n        ...(!isGetAlikeMethod && data && !config.data ? { data } : {}),\n        ...(!isGetAlikeMethod && config.data ? { data: config.data } : {}),\n      };\n    }\n\n    // Native fetch\n\n    // Axios uses different property. Add a quick check.\n    const payload = config.body || config.data || data;\n\n    delete config.data;\n\n    return {\n      ...config,\n\n      // Native fetch generally requires query params to be appended in the URL\n      // Do not append query params only if it's a POST-alike request with only \"data\" specified as it's treated as body payload\n      url:\n        (!isGetAlikeMethod && data && !config.body) || !data\n          ? url\n          : this.appendQueryParams(url, data),\n\n      // Uppercase method name\n      method: method.toUpperCase(),\n\n      // For convenience, add the same default headers as Axios does\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json;charset=utf-8',\n        ...(config.headers || {}),\n      } as EndpointConfigHeaders,\n\n      // Automatically JSON stringify request bodies, if possible and when not dealing with strings\n      ...(!isGetAlikeMethod\n        ? {\n            body: this.isJSONSerializable(payload)\n              ? typeof payload === 'string'\n                ? payload\n                : JSON.stringify(payload)\n              : payload,\n          }\n        : {}),\n    };\n  }\n\n  /**\n   * Process global Request Error\n   *\n   * @param {RequestError} error      Error instance\n   * @param {EndpointConfig} requestConfig   Per endpoint request config\n   * @returns {void}\n   */\n  protected processRequestError(\n    error: RequestError,\n    requestConfig: EndpointConfig,\n  ): void {\n    if (this.isRequestCancelled(error)) {\n      return;\n    }\n\n    // Invoke per request \"onError\" call\n    if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n      requestConfig.onError(error);\n    }\n\n    const errorHandler = new RequestErrorHandler(\n      this.logger,\n      this.requestErrorService,\n    );\n\n    errorHandler.process(error);\n  }\n\n  /**\n   * Output default response in case of an error, depending on chosen strategy\n   *\n   * @param {RequestError} error      Error instance\n   * @param {EndpointConfig} requestConfig   Per endpoint request config\n   * @returns {*} Error response\n   */\n  protected async outputErrorResponse(\n    error: RequestError,\n    requestConfig: EndpointConfig,\n  ): Promise<RequestResponse> {\n    const isRequestCancelled = this.isRequestCancelled(error);\n    const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n    // By default cancelled requests aren't rejected\n    if (isRequestCancelled && !requestConfig.rejectCancelled) {\n      return this.defaultResponse;\n    }\n\n    if (errorHandlingStrategy === 'silent') {\n      // Hang the promise\n      await new Promise(() => null);\n\n      return this.defaultResponse;\n    }\n\n    // Simply rejects a request promise\n    if (\n      errorHandlingStrategy === 'reject' ||\n      errorHandlingStrategy === 'throwError'\n    ) {\n      return Promise.reject(error);\n    }\n\n    return this.defaultResponse;\n  }\n\n  /**\n   * Output error response depending on chosen strategy\n   *\n   * @param {RequestError} error               Error instance\n   * @returns {boolean}                        True if request is aborted\n   */\n  public isRequestCancelled(error: RequestError): boolean {\n    return error.name === 'AbortError' || error.name === 'CanceledError';\n  }\n\n  /**\n   * Detects if a custom fetcher is utilized\n   *\n   * @returns {boolean}                        True if it's a custom fetcher\n   */\n  protected isCustomFetcher(): boolean {\n    return this.fetcher !== null;\n  }\n\n  /**\n   * Automatically Cancel Previous Requests using AbortController when \"cancellable\" is defined\n   *\n   * @param {EndpointConfig} requestConfig   Per endpoint request config\n   * @returns {Object} Controller Signal to abort\n   */\n  protected addCancellationToken(\n    requestConfig: EndpointConfig,\n  ): Partial<Record<'signal', AbortSignal>> {\n    // Both disabled\n    if (!this.cancellable && !requestConfig.cancellable) {\n      return {};\n    }\n\n    // Explicitly disabled per request\n    if (\n      typeof requestConfig.cancellable !== 'undefined' &&\n      !requestConfig.cancellable\n    ) {\n      return {};\n    }\n\n    // Check if AbortController is available\n    if (typeof AbortController === 'undefined') {\n      console.error('AbortController is unavailable.');\n\n      return {};\n    }\n\n    const { method, baseURL, url, params, data } = requestConfig;\n\n    // Generate unique key as a cancellation token. Make sure it fits Map\n    const key = JSON.stringify([method, baseURL, url, params, data]).substring(\n      0,\n      55 ** 5,\n    );\n    const previousRequest = this.requestsQueue.get(key);\n\n    if (previousRequest) {\n      previousRequest.abort();\n    }\n\n    const controller = new AbortController();\n\n    // Introduce timeout for native fetch\n    if (!this.isCustomFetcher()) {\n      const abortTimeout = setTimeout(() => {\n        const error = new Error(\n          `[TimeoutError]: The ${url} request was aborted due to timeout`,\n        );\n\n        error.name = 'TimeoutError';\n        (error as any).code = 23; // DOMException.TIMEOUT_ERR\n        controller.abort(error);\n        clearTimeout(abortTimeout);\n      }, requestConfig.timeout || this.timeout);\n    }\n    this.requestsQueue.set(key, controller);\n\n    return {\n      signal: controller.signal,\n    };\n  }\n\n  /**\n   * Handle Request depending on used strategy\n   *\n   * @param {object} payload                      Payload\n   * @param {string} payload.type                 Request type\n   * @param {string} payload.url                  Request url\n   * @param {*} payload.data                      Request data\n   * @param {EndpointConfig} payload.config       Request config\n   * @throws {RequestError}\n   * @returns {Promise} Response Data\n   */\n  public async handleRequest(\n    type: Method,\n    url: string,\n    data: unknown = null,\n    config: EndpointConfig = null,\n  ): Promise<RequestResponse> {\n    let response = null;\n    const endpointConfig = config || {};\n    let requestConfig = this.buildRequestConfig(\n      type,\n      url,\n      data,\n      endpointConfig,\n    );\n\n    requestConfig = {\n      ...this.addCancellationToken(requestConfig),\n      ...requestConfig,\n    };\n\n    try {\n      // Axios compatibility\n      if (this.isCustomFetcher()) {\n        response = await (this.requestInstance as any).request(requestConfig);\n      } else {\n        // Native fetch\n        response = await (this.requestInstance as NativeFetch)(\n          url,\n          requestConfig,\n        );\n\n        // Check if the response status is not outside the range 200-299\n        if (response.ok) {\n          // Parse and return the JSON response\n          response = await response.json();\n        } else {\n          const error = new Error(`HTTP error! Status: ${response.status}`);\n\n          // Attach the response object to the error for further inspection\n          (error as any).response = response;\n\n          throw error;\n        }\n      }\n    } catch (error) {\n      this.processRequestError(error, requestConfig);\n\n      return this.outputErrorResponse(error, requestConfig);\n    }\n\n    return this.processResponseData(response);\n  }\n\n  /**\n   * Process response\n   *\n   * @param response Response object\n   * @returns {*} Response data\n   */\n  protected processResponseData(response) {\n    if (response.data) {\n      if (!this.flattenResponse) {\n        return response;\n      }\n\n      // Special case of only data property within response data object (happens in Axios)\n      // This is in fact a proper response but we may want to flatten it\n      // To ease developers' lives when obtaining the response\n      if (\n        typeof response.data === 'object' &&\n        typeof response.data.data !== 'undefined' &&\n        Object.keys(response.data).length === 1\n      ) {\n        return response.data.data;\n      }\n\n      return response.data;\n    }\n\n    return this.defaultResponse;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nexport class RequestErrorHandler {\n  /**\n   * Logger Class\n   *\n   * @type {*}\n   * @memberof RequestErrorHandler\n   */\n  protected logger: any;\n\n  /**\n   * Error Service Class\n   *\n   * @type {*}\n   * @memberof RequestErrorHandler\n   */\n  public requestErrorService: any;\n\n  public constructor(logger: any, requestErrorService: any) {\n    this.logger = logger;\n    this.requestErrorService = requestErrorService;\n  }\n\n  /**\n   * Process and Error\n   *\n   * @param {*} error Error instance or message\n   * @throws          Request error context\n   * @returns {void}\n   */\n  public process(error: string | Error): void {\n    if (this.logger?.warn) {\n      this.logger.warn('API ERROR', error);\n    }\n\n    let errorContext = error;\n\n    if (typeof error === 'string') {\n      errorContext = new Error(error);\n    }\n\n    if (this.requestErrorService) {\n      if (typeof this.requestErrorService.process !== 'undefined') {\n        this.requestErrorService.process(errorContext);\n      } else if (typeof this.requestErrorService === 'function') {\n        this.requestErrorService(errorContext);\n      }\n    }\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","ApiHandler","RequestErrorHandler","RequestHandler","createApiFetcher","__toCommonJS","import_js_magic","import_js_magic","RequestErrorHandler","logger","requestErrorService","error","_a","errorContext","RequestHandler","fetcher","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","logger","onError","config","prop","url","params","queryString","key","value","val","proto","method","data","methodLowerCase","isGetAlikeMethod","payload","error","requestConfig","RequestErrorHandler","isRequestCancelled","errorHandlingStrategy","previousRequest","controller","abortTimeout","type","response","endpointConfig","__decorateClass","ApiHandler","config","RequestHandler","prop","args","endpointSettings","queryParams","uriParams","requestConfig","uri","str","responseData","additionalRequestSettings","_a","__decorateClass","createApiFetcher","options"]}