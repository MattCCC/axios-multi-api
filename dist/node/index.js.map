{"version":3,"sources":["../src/index.ts","../src/api-handler.ts","../src/http-request-handler.ts","../src/http-request-error-handler.ts"],"sourcesContent":["// List of exports\nexport * from './types/api';\nexport * from './types/http-request';\nexport * from './api-handler';\nexport * from './http-request-handler';\nexport * from './http-request-error-handler';","// 3rd party libs\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Types\nimport {\n    AxiosInstance,\n} from 'axios';\n\nimport {\n    IRequestResponse,\n    APIHandlerConfig,\n    EndpointConfig,\n} from './types/http-request';\n\nimport {\n    HttpRequestHandler,\n} from './http-request-handler';\n\n/**\n * Handles dispatching of API requests\n */\n@applyMagic\nexport class ApiHandler implements MagicalClass {\n    /**\n     * TS Index signature\n     */\n    [x: string]: any;\n\n    /**\n     * Api Url\n     */\n    public apiUrl = '';\n\n    /**\n     * @var httpRequestHandler Request Wrapper Instance\n     */\n    public httpRequestHandler: HttpRequestHandler;\n\n    /**\n     * Endpoints\n     */\n    public apiEndpoints: Record<string, EndpointConfig>;\n\n    /**\n     * Logger\n     */\n    public logger: any;\n\n    /**\n     * Creates an instance of API Handler\n     *\n     * @param {string} apiUrl               Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} onError                   Instance of Error Service Class\n     */\n    public constructor({\n        apiUrl,\n        apiEndpoints,\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: APIHandlerConfig) {\n        this.apiUrl = apiUrl;\n        this.apiEndpoints = apiEndpoints;\n        this.logger = logger;\n\n        this.httpRequestHandler = new HttpRequestHandler({\n            ...config,\n            baseURL: this.apiUrl,\n            timeout,\n            cancellable,\n            strategy,\n            flattenResponse,\n            defaultResponse,\n            logger,\n            onError,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.httpRequestHandler.getInstance();\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {*} prop          Caller\n     * @returns {Function}      Tailored request function\n     */\n    public __get(prop: any): any {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        // Prevent handler from running for non-existent endpoints\n        if (!this.apiEndpoints[prop]) {\n            return this.handleNonImplemented.bind(this, prop)\n        }\n\n        return this.handleRequest.bind(this, prop);\n    }\n\n    /**\n     * Handle Single API Request\n     *\n     * @param {*} args      Arguments\n     * @returns {Promise}   Resolvable API provider promise\n     */\n    public async handleRequest(...args: any): Promise<IRequestResponse> {\n        const prop = args[0];\n        const endpointSettings = this.apiEndpoints[prop];\n\n        const queryParams = args[1] || {};\n        const uriParams = args[2] || {};\n        const requestConfig = args[3] || {};\n\n        const uri = endpointSettings.url.replace(/:[a-z]+/gi, (str: string) =>\n          uriParams[str.substring(1)] ? uriParams[str.substring(1)] : str\n        );\n\n        let responseData = null;\n\n        const additionalRequestSettings = { ...endpointSettings };\n\n        delete additionalRequestSettings.url;\n        delete additionalRequestSettings.method;\n\n        responseData = await this.httpRequestHandler[(endpointSettings.method || 'get').toLowerCase()](uri, queryParams, {\n            ...requestConfig,\n            ...additionalRequestSettings,\n        });\n\n        return responseData;\n    }\n\n    /**\n     * Triggered when trying to use non-existent endpoints\n     *\n     * @param prop Method Name\n     * @returns {Promise}\n     */\n    protected handleNonImplemented(prop: string): Promise<any> {\n        if (this.logger && this.logger.log) {\n            this.logger.log(`${prop} endpoint not implemented.`)\n        }\n\n        return Promise.resolve(null);\n    }\n}\n\nexport const createApiFetcher = (options: APIHandlerConfig) => new ApiHandler(options);\n","// 3rd party libs\nimport axios, {\n    AxiosInstance,\n    Method,\n} from 'axios';\nimport {\n    applyMagic,\n    MagicalClass,\n} from 'js-magic';\n\n// Shared Modules\nimport {\n    HttpRequestErrorHandler,\n} from './http-request-error-handler';\n\n// Types\nimport {\n    IRequestData,\n    IRequestResponse,\n    InterceptorCallback,\n    ErrorHandlingStrategy,\n    RequestHandlerConfig,\n    EndpointConfig,\n    RequestError,\n} from './types/http-request';\n\n/**\n * Generic Request Handler\n * It creates an Axios instance and handles requests within that instance\n * It handles errors depending on a chosen error handling strategy\n */\n@applyMagic\nexport class HttpRequestHandler implements MagicalClass {\n    /**\n     * @var requestInstance Provider's instance\n     */\n    public requestInstance: AxiosInstance;\n\n    /**\n     * @var timeout Request timeout\n     */\n    public timeout: number = 30000;\n\n    /**\n     * @var cancellable Response cancellation\n     */\n    public cancellable: boolean = false;\n\n    /**\n     * @var strategy Request timeout\n     */\n    public strategy: ErrorHandlingStrategy = 'silent';\n\n    /**\n     * @var flattenResponse Response flattening\n     */\n    public flattenResponse: boolean = true;\n\n    /**\n     * @var defaultResponse Response flattening\n     */\n    public defaultResponse: any = null;\n\n    /**\n     * @var logger Logger\n     */\n    protected logger: any;\n\n    /**\n     * @var httpRequestErrorService HTTP error service\n     */\n    protected httpRequestErrorService: any;\n\n    /**\n     * @var requestsQueue    Queue of requests\n     */\n    protected requestsQueue: Map<string, any>;\n\n    /**\n     * Creates an instance of HttpRequestHandler\n     *\n     * @param {string} baseURL              Base URL for all API calls\n     * @param {number} timeout              Request timeout\n     * @param {string} strategy             Error Handling Strategy\n     * @param {string} flattenResponse      Whether to flatten response \"data\" object within \"data\" one\n     * @param {*} logger                    Instance of Logger Class\n     * @param {*} httpRequestErrorService   Instance of Error Service Class\n     */\n    public constructor({\n        baseURL = '',\n        timeout = null,\n        cancellable = false,\n        strategy = null,\n        flattenResponse = null,\n        defaultResponse = {},\n        logger = null,\n        onError = null,\n        ...config\n    }: RequestHandlerConfig) {\n        this.timeout = timeout !== null ? timeout : this.timeout;\n        this.strategy = strategy !== null ? strategy : this.strategy;\n        this.cancellable = cancellable || this.cancellable;\n        this.flattenResponse = flattenResponse !== null ? flattenResponse : this.flattenResponse;\n        this.defaultResponse = defaultResponse;\n        this.logger = logger || global.console || window.console || null;\n        this.httpRequestErrorService = onError;\n        this.requestsQueue = new Map();\n\n        this.requestInstance = axios.create({\n            ...config,\n            baseURL,\n            timeout: this.timeout,\n        });\n    }\n\n    /**\n     * Get Provider Instance\n     *\n     * @returns {AxiosInstance} Provider's instance\n     */\n    public getInstance(): AxiosInstance {\n        return this.requestInstance;\n    }\n\n    /**\n     * Intercept Request\n     *\n     * @param {*} callback callback to use before request\n     * @returns {void}\n     */\n    public interceptRequest(callback: InterceptorCallback): void {\n        this.getInstance().interceptors.request.use(callback);\n    }\n\n    /**\n     * Maps all API requests\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public __get(prop: string) {\n        if (prop in this) {\n            return this[prop];\n        }\n\n        return this.prepareRequest.bind(this, prop);\n    }\n\n    /**\n     * Prepare Request\n     *\n     * @param {string} url                  Url\n     * @param {*} data                      Payload\n     * @param {EndpointConfig} config       Config\n     * @throws {RequestError}                      If request fails\n     * @returns {Promise}                   Request response or error info\n     */\n    public prepareRequest(type: Method, url: string, data: any = null, config: EndpointConfig = null): Promise<IRequestResponse> {\n        return this.handleRequest({\n            type,\n            url,\n            data,\n            config,\n        });\n    }\n\n    /**\n     * Build request configuration\n     *\n     * @param {string} method               Request method\n     * @param {string} url                  Request url\n     * @param {*}      data                 Request data\n     * @param {EndpointConfig} config       Request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected buildRequestConfig(method: string, url: string, data: any, config: EndpointConfig): EndpointConfig {\n        const methodLowerCase = method.toLowerCase() as Method;\n        const key = methodLowerCase === 'get' || methodLowerCase === 'head' ? 'params' : 'data';\n\n        return {\n            ...config,\n            url,\n            method: methodLowerCase,\n            [key]: data || {},\n        };\n    }\n\n    /**\n     * Process global Request Error\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected processRequestError(error: RequestError, requestConfig: EndpointConfig): void {\n        if (axios.isCancel(error)) {\n            return;\n        }\n\n        // Invoke per request \"onError\" call\n        if (requestConfig.onError && typeof requestConfig.onError === 'function') {\n            requestConfig.onError(error);\n        }\n\n        const errorHandler = new HttpRequestErrorHandler(\n            this.logger,\n            this.httpRequestErrorService\n        );\n\n        errorHandler.process(error);\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error      Error instance\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected async outputErrorResponse(error: RequestError, requestConfig: EndpointConfig): Promise<IRequestResponse> {\n        const isRequestCancelled = requestConfig.cancelToken && axios.isCancel(error);\n        const errorHandlingStrategy = requestConfig.strategy || this.strategy;\n\n        // By default cancelled requests aren't rejected\n        if (isRequestCancelled && !requestConfig.rejectCancelled) {\n            return this.defaultResponse;\n        }\n\n        if (errorHandlingStrategy === 'silent') {\n            // Hang the promise\n            await new Promise(() => null);\n\n            return this.defaultResponse;\n        }\n\n        // Simply rejects a request promise\n        if (errorHandlingStrategy === 'reject' || errorHandlingStrategy === 'throwError') {\n            return Promise.reject(error);\n        }\n\n        return this.defaultResponse;\n    }\n\n    /**\n     * Output error response depending on chosen strategy\n     *\n     * @param {RequestError} error                     Error instance\n     * @param {EndpointConfig} requestConfig    Per endpoint request config\n     * @returns {*}                             Error response\n     */\n    public isRequestCancelled(error: RequestError, requestConfig: EndpointConfig): boolean {\n        return requestConfig.cancelToken && axios.isCancel(error);\n    }\n\n    /**\n     * Automatically Cancel Previous Requests\n     *\n     * @param {string} type                    Request type\n     * @param {string} url                     Request url\n     * @param {EndpointConfig} requestConfig   Per endpoint request config\n     * @returns {AxiosInstance} Provider's instance\n     */\n    protected addCancellationToken(type: string, url: string, requestConfig: EndpointConfig) {\n        // Both disabled\n        if (!this.cancellable && !requestConfig.cancellable) {\n            return {};\n        }\n\n        // Explicitly disabled per request\n        if (typeof requestConfig.cancellable !== \"undefined\" && !requestConfig.cancellable) {\n            return {};\n        }\n\n        const key = `${type}-${url}`;\n        const previousRequest = this.requestsQueue.get(key);\n\n        if (previousRequest) {\n            previousRequest.cancel();\n        }\n\n        const tokenSource = axios.CancelToken.source();\n\n        this.requestsQueue.set(key, tokenSource);\n\n        const mappedRequest = this.requestsQueue.get(key) || {};\n\n        return mappedRequest.token ? {\n            cancelToken: mappedRequest.token\n        } : {};\n    }\n\n    /**\n     * Handle Request depending on used strategy\n     *\n     * @param {object} payload                      Payload\n     * @param {string} payload.type                 Request type\n     * @param {string} payload.url                  Request url\n     * @param {*} payload.data                      Request data\n     * @param {EndpointConfig} payload.config       Request config\n     * @throws {RequestError}\n     * @returns {Promise} Response Data\n     */\n    protected async handleRequest({\n        type,\n        url,\n        data = null,\n        config = null,\n    }: IRequestData): Promise<IRequestResponse> {\n        let response = null;\n        const endpointConfig = config || {};\n        let requestConfig = this.buildRequestConfig(type, url, data, endpointConfig);\n\n        requestConfig = {\n            ...this.addCancellationToken(type, url, requestConfig),\n            ...requestConfig,\n        };\n\n        try {\n            response = await this.requestInstance.request(requestConfig);\n        } catch (error) {\n            this.processRequestError(error, requestConfig);\n\n            return this.outputErrorResponse(error, requestConfig);\n        }\n\n        return this.processResponseData(response);\n    }\n\n    /**\n     * Process request response\n     *\n     * @param response Response object\n     * @returns {*} Response data\n     */\n    protected processResponseData(response) {\n        if (response.data) {\n            if (!this.flattenResponse) {\n                return response;\n            }\n\n            // Special case of data property within Axios data object\n            // This is in fact a proper response but we may want to flatten it\n            // To ease developers' lives when obtaining the response\n            if (typeof response.data === 'object' && typeof response.data.data !== \"undefined\" && Object.keys(response.data).length === 1) {\n                return response.data.data;\n            }\n\n            return response.data;\n        }\n\n        return this.defaultResponse;\n    }\n}","export class HttpRequestErrorHandler {\n    /**\n     * Logger Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public logger: any;\n\n    /**\n     * Error Service Class\n     *\n     * @type {*}\n     * @memberof HttpRequestErrorHandler\n     */\n    public httpRequestErrorService: any;\n\n    public constructor(logger: any, httpRequestErrorService: any) {\n        this.logger = logger;\n        this.httpRequestErrorService = httpRequestErrorService;\n    }\n\n    /**\n     * Process and Error\n     *\n     * @param {*} error Error instance or message\n     * @throws          Request error context\n     * @returns {void}\n     */\n    public process(error: string | Error) {\n        if (this.logger && this.logger.warn) {\n            this.logger.warn('API ERROR', error);\n        }\n\n        let errorContext = error;\n\n        if (typeof error === 'string') {\n            errorContext = new Error(error);\n        }\n\n        if (this.httpRequestErrorService) {\n            if (typeof this.httpRequestErrorService.process !== 'undefined') {\n                this.httpRequestErrorService.process(errorContext);\n            } else if (typeof this.httpRequestErrorService === 'function') {\n                this.httpRequestErrorService(errorContext);\n            }\n        }\n    }\n}"],"mappings":"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","names":["src_exports","__export","ApiHandler","HttpRequestErrorHandler","HttpRequestHandler","createApiFetcher","__toCommonJS","import_js_magic","import_axios","import_js_magic","HttpRequestErrorHandler","logger","httpRequestErrorService","error","errorContext","HttpRequestHandler","baseURL","timeout","cancellable","strategy","flattenResponse","defaultResponse","logger","onError","config","axios","callback","prop","type","url","data","method","methodLowerCase","error","requestConfig","HttpRequestErrorHandler","isRequestCancelled","errorHandlingStrategy","key","previousRequest","tokenSource","mappedRequest","response","endpointConfig","__decorateClass","ApiHandler","apiUrl","apiEndpoints","timeout","cancellable","strategy","flattenResponse","defaultResponse","logger","onError","config","HttpRequestHandler","prop","args","endpointSettings","queryParams","uriParams","requestConfig","uri","str","responseData","additionalRequestSettings","__decorateClass","createApiFetcher","options"]}